---
- name: Create {{ ocp4_workload_portworx_namespace }} namespace
  kubernetes.core.k8s:
    name: "{{ ocp4_workload_portworx_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Get machineset name
  k8s_info:
    kind: MachineSet
    api_version: v1beta1
  register: ocp_machineset

- name: increase machinesets in ocp4
  k8s:
    name: "{{ ocp_machineset.resources[0].metadata.name }}"
    namespace: openshift-machine-api
    kind: MachineSet
    api_version: v1beta1
    definition:
      spec:
        replicas: 3

- name: Gather aws security group info
  amazon.aws.ec2_group_info:
    filters:
      "tag:Name": "*worker*"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: sg_info

- name: Add aws security group rules for portworx operator
  amazon.aws.ec2_group:
    name: "{{ sg_info.security_groups[0].group_name }}"
    description: "Edited by Ansible installer"
    purge_rules: false
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: 17001 - 17020
        cidr_ip: 0.0.0.0/0
        rule_desc: "portworx"
        group_id: "{{ sg_info.security_groups[0].group_id }}"
      - proto: udp
        ports: 17002
        cidr_ip: 0.0.0.0/0
        rule_desc: "portworx"
        group_id: "{{ sg_info.security_groups[0].group_id }}"

- name: Get aws IAM user info
  community.aws.iam_user_info:
    path: "/"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: iam_user_info

- name: set aws admin user name
  set_fact:
    iam_admin_user: "{{ iam_user_info.iam_users | map(attribute='user_name') | regex_search('open-environment-.*-admin') }}"

- name: Create aws policy to allow creation of EBS
  community.aws.iam_policy:
    iam_type: user
    iam_name: "{{ iam_admin_user }}"
    policy_name: "{{ ocp4_workload_portworx_policy_name }}"
    state: present
    policy_json: "{{ lookup('template', 'aws_policy.j2') }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"

- name: Create {{ ocp4_workload_portworx_namespace }} subscription
  kubernetes.core.k8s:
    template: portworx_subscription.j2
    namespace: "{{ ocp4_workload_portworx_namespace }}"
    state: present

- name: Create {{ ocp4_workload_portworx_namespace }} storage cluster
  kubernetes.core.k8s:
    template: portworx_storagecluster.j2
    namespace: "{{ ocp4_workload_portworx_namespace }}"
    state: present

- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
